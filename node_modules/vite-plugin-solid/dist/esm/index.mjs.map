{"version":3,"file":"index.mjs","sources":["../../src/index.ts"],"sourcesContent":["import { transformAsync, TransformOptions } from '@babel/core';\r\nimport ts from '@babel/preset-typescript';\r\nimport solid from 'babel-preset-solid';\r\nimport { readFileSync } from 'fs';\r\nimport { mergeAndConcat } from 'merge-anything';\r\nimport { createRequire } from 'module';\r\nimport solidRefresh from 'solid-refresh/babel.js';\r\nimport type { Alias, AliasOptions, Plugin, UserConfig } from 'vite';\r\n\r\nconst require = createRequire(import.meta.url);\r\n\r\nconst runtimePublicPath = '/@solid-refresh';\r\nconst runtimeFilePath = require.resolve('solid-refresh/dist/solid-refresh.mjs');\r\nconst runtimeCode = readFileSync(runtimeFilePath, 'utf-8');\r\n\r\n/** Configuration options for vite-plugin-solid. */\r\nexport interface Options {\r\n  /**\r\n   * This will inject solid-js/dev in place of solid-js in dev mode. Has no\r\n   * effect in prod. If set to `false`, it won't inject it in dev. This is\r\n   * useful for extra logs and debugging.\r\n   *\r\n   * @default true\r\n   */\r\n  dev: boolean;\r\n  /**\r\n   * This will force SSR code in the produced files. This is experiemental\r\n   * and mostly not working yet.\r\n   *\r\n   * @default false\r\n   */\r\n  ssr: boolean;\r\n  /**\r\n   * This will inject HMR runtime in dev mode. Has no effect in prod. If\r\n   * set to `false`, it won't inject the runtime in dev.\r\n   *\r\n   * @default true\r\n   */\r\n  hot: boolean;\r\n  /**\r\n   * Pass any additional babel transform options. They will be merged with\r\n   * the transformations required by Solid.\r\n   *\r\n   * @default {}\r\n   */\r\n  babel:\r\n    | TransformOptions\r\n    | ((source: string, id: string, ssr: boolean) => TransformOptions)\r\n    | ((source: string, id: string, ssr: boolean) => Promise<TransformOptions>);\r\n  /**\r\n   * Pass any additional [babel-plugin-jsx-dom-expressions](https://github.com/ryansolid/dom-expressions/tree/main/packages/babel-plugin-jsx-dom-expressions#plugin-options).\r\n   * They will be merged with the defaults sets by [babel-preset-solid](https://github.com/solidjs/solid/blob/main/packages/babel-preset-solid/index.js#L8-L25).\r\n   *\r\n   * @default {}\r\n   */\r\n  solid: {\r\n    /**\r\n     * The name of the runtime module to import the methods from.\r\n     *\r\n     * @default \"solid-js/web\"\r\n     */\r\n    moduleName?: string;\r\n\r\n    /**\r\n     * The output mode of the compiler.\r\n     * Can be:\r\n     * - \"dom\" is standard output\r\n     * - \"ssr\" is for server side rendering of strings.\r\n     *\r\n     * @default \"dom\"\r\n     */\r\n    generate?: 'ssr' | 'dom';\r\n\r\n    /**\r\n     * Indicate whether the output should contain hydratable markers.\r\n     *\r\n     * @default false\r\n     */\r\n    hydratable?: boolean;\r\n\r\n    /**\r\n     * Boolean to indicate whether to enable automatic event delegation on camelCase.\r\n     *\r\n     * @default true\r\n     */\r\n    delegateEvents?: boolean;\r\n\r\n    /**\r\n     * Boolean indicates whether smart conditional detection should be used.\r\n     * This optimizes simple boolean expressions and ternaries in JSX.\r\n     *\r\n     * @default true\r\n     */\r\n    wrapConditionals?: boolean;\r\n\r\n    /**\r\n     * Boolean indicates whether to set current render context on Custom Elements and slots.\r\n     * Useful for seemless Context API with Web Components.\r\n     *\r\n     * @default true\r\n     */\r\n    contextToCustomElements?: boolean;\r\n\r\n    /**\r\n     * Array of Component exports from module, that aren't included by default with the library.\r\n     * This plugin will automatically import them if it comes across them in the JSX.\r\n     *\r\n     * @default [\"For\",\"Show\",\"Switch\",\"Match\",\"Suspense\",\"SuspenseList\",\"Portal\",\"Index\",\"Dynamic\",\"ErrorBoundary\"]\r\n     */\r\n    builtIns?: string[];\r\n  };\r\n}\r\n\r\nexport default function solidPlugin(options: Partial<Options> = {}): Plugin {\r\n  let needHmr = false;\r\n\r\n  return {\r\n    name: 'solid',\r\n    enforce: 'pre',\r\n\r\n    config(userConfig, { command }): UserConfig {\r\n      // We inject the dev mode only if the user explicitely wants it or if we are in dev (serve) mode\r\n      const replaceDev = options.dev === true || (options.dev !== false && command === 'serve');\r\n\r\n      // TODO: remove when fully removed from vite\r\n      const legacyAlias = normalizeAliases(userConfig.alias);\r\n\r\n      if (!userConfig.resolve) userConfig.resolve = {};\r\n      userConfig.resolve.alias = [...legacyAlias, ...normalizeAliases(userConfig.resolve?.alias)];\r\n\r\n      const nestedDeps = [\r\n        'solid-js',\r\n        'solid-js/web',\r\n        'solid-js/store',\r\n        'solid-js/html',\r\n        'solid-js/h',\r\n      ];\r\n\r\n      return mergeAndConcat(userConfig, {\r\n        /**\r\n         * We only need esbuild on .ts or .js files.\r\n         * .tsx & .jsx files are handled by us\r\n         */\r\n        esbuild: { include: /\\.ts$/ },\r\n        resolve: {\r\n          conditions: ['solid', ...(replaceDev ? ['development'] : [])],\r\n          dedupe: nestedDeps,\r\n          alias: [{ find: /^solid-refresh$/, replacement: runtimePublicPath }],\r\n        },\r\n        optimizeDeps: {\r\n          include: nestedDeps,\r\n        },\r\n      }) as UserConfig;\r\n    },\r\n\r\n    configResolved(config) {\r\n      needHmr = config.command === 'serve' && !config.isProduction && options.hot !== false;\r\n    },\r\n\r\n    resolveId(id) {\r\n      if (id === runtimePublicPath) return id;\r\n    },\r\n\r\n    load(id) {\r\n      if (id === runtimePublicPath) return runtimeCode;\r\n    },\r\n\r\n    async transform(source, id, ssr) {\r\n      if (!/\\.[jt]sx/.test(id)) return null;\r\n\r\n      let solidOptions: { generate: 'ssr' | 'dom'; hydratable: boolean };\r\n\r\n      if (options.ssr) {\r\n        if (ssr) {\r\n          solidOptions = { generate: 'ssr', hydratable: true };\r\n        } else {\r\n          solidOptions = { generate: 'dom', hydratable: true };\r\n        }\r\n      } else {\r\n        solidOptions = { generate: 'dom', hydratable: false };\r\n      }\r\n\r\n      const opts: TransformOptions = {\r\n        filename: id,\r\n        presets: [[solid, { ...solidOptions, ...(options.solid || {}) }]],\r\n        plugins: needHmr ? [[solidRefresh, { bundler: 'vite' }]] : [],\r\n      };\r\n\r\n      if (id.includes('tsx')) {\r\n        opts.presets.push(ts);\r\n      }\r\n\r\n      // Default value for babel user options\r\n      let babelUserOptions: TransformOptions = {};\r\n\r\n      if (options.babel) {\r\n        if (typeof options.babel === 'function') {\r\n          const babelOptions = options.babel(source, id, ssr);\r\n          babelUserOptions = babelOptions instanceof Promise ? await babelOptions : babelOptions;\r\n        } else {\r\n          babelUserOptions = options.babel;\r\n        }\r\n      }\r\n\r\n      const babelOptions = mergeAndConcat(babelUserOptions, opts) as TransformOptions;\r\n\r\n      const { code, map } = await transformAsync(source, babelOptions);\r\n\r\n      return { code, map };\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * This basically normalize all aliases of the config into\r\n * the array format of the alias.\r\n *\r\n * eg: alias: { '@': 'src/' } => [{ find: '@', replacement: 'src/' }]\r\n */\r\nfunction normalizeAliases(alias: AliasOptions = []): Alias[] {\r\n  return Array.isArray(alias)\r\n    ? alias\r\n    : Object.entries(alias).map(([find, replacement]) => ({ find, replacement }));\r\n}\r\n"],"names":["require","createRequire","import","meta","url","runtimePublicPath","runtimeFilePath","resolve","runtimeCode","readFileSync","solidPlugin","options","needHmr","name","enforce","config","userConfig","command","replaceDev","dev","legacyAlias","normalizeAliases","alias","nestedDeps","mergeAndConcat","esbuild","include","conditions","dedupe","find","replacement","optimizeDeps","configResolved","isProduction","hot","resolveId","id","load","transform","source","ssr","test","solidOptions","generate","hydratable","opts","filename","presets","solid","plugins","solidRefresh","bundler","includes","push","ts","babelUserOptions","babel","babelOptions","Promise","code","map","transformAsync","Array","isArray","Object","entries"],"mappings":"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"}